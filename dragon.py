from bullet import Bullet

class DRAGON_BULLET(Bullet):
	# __i=0
	# __j=0						    # inheritance 
	def __init__(self,i,j):
		self._i=i
		self._j=j
		self._mat=[['<','<','<','<']]      
	def detect_colision(self,mando,obj,st0,st):  # polymorphism ( method overriding)
		if mando.isshield():
			return 0
		ax=self._i
		ay=self._j+st
		bx=mando.getx()
		by=mando.gety()+st0
		for i in range(0,3):
			for j in range(0,3):
				if bx+i == ax and by+j in range(ay,ay+3):
					return 1
		return 0
	def move_left(self,st,st0,mando):
		x=mando.getx()
		if self._i < x :
			self._i=self._i+1
		if self._i > x:
			self._i = self._i-1
		if self._j - 4 >=0:
			self._j=self._j-4
			return 1
		return 0

class Dragon:
	def __init__(self,i,j):
		self.__i0=i
		self.__j0=j
		self.__i=i
		self.__j=j
		self.__mat=[[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '(', '/', '\\', '_', '_', '_', ' ', ' ', ' ', '/', '|', '\\', '\\', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '(', ')', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '<', '>', '_'], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\\', '_', '/', ' ', '|', ' ', '\\', '\\', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '/', '/', '|', '\\', ' ', ' ', ' ', '_', '_', '_', '_', '_', '_', '/', ' ', '\\', ')'], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\\', '_', '|', ' ', ' ', '\\', '\\', ' ', ' ', ' ', ' ', ' ', ' ', '/', '/', ' ', '|', ' ', '\\', '_', '/'], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\\', '|', '\\', '/', '|', '\\', '_', ' ', ' ', ' ', '/', '/', ' ', ' ', '/', '\\', '/'], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '(', 'o', 'o', ')', '\\', ' ', '\\', '_', '/', '/', ' ', ' ', '/'], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '/', '/', '_', '/', '\\', '_', '\\', '/', ' ', '/', ' ', ' ', '|'], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', '@', '/', ' ', ' ', '|', '=', '\\', ' ', ' ', '\\', ' ', ' ', '|'], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\\', '_', '=', '\\', '_', ' ', '\\', ' ', '|'], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\\', '=', '=', '\\', ' ', '\\', '|', '\\', '_', ' '], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '_', '_', '(', '\\', '=', '=', '=', '\\', '(', ' ', ' ', ')', '\\'], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '(', '(', '(', '~', ')', ' ', '_', '_', '(', '_', '/', ' ', ' ', ' ', '|'], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '(', '(', '(', '~', ')', ' ', '\\', ' ', ' ', '/'], [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '_', '_', '_', '_', '_', '_', '/', ' ', '/']]
		self.__lives=3
	def add_to_board(self,obj,st):
		# grid=obj.get_grid()
		for i in range(0,len(self.__mat)):
			for j in range(0,len(self.__mat[i])):
				obj.set_grid(i+self.__i,j+self.__j+st,self.__mat[i][j])

	def remove_from_board(self,obj,st):
		grid=obj.get_grid()
		for i in range(0,len(self.__mat)):
			for j in range(0,len(self.__mat[i])):
				obj.set_grid(i+self.__i,j+self.__j+st,' ')


	def chase(self,obj):
		inc=obj.detect_dragon(self.__i+6)
		self.__i=self.__i+inc
		if self.__i >=41:
			self.__i=41
		if self.__i <3:
			self.__i=3
	def fire(self):
		bullet=DRAGON_BULLET(self.__i+6,self.__j+20)
		return bullet
	def decrease_lives(self):
		self.__lives=self.__lives-1
		if self.__lives==0:
			return 1
		return 0
	def get_lives(self):
		return self.__lives
	def kill(self):
		self.__mat=[[""]]
